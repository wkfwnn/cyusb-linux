#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include "hid.h"
#include "device.h"
/*#include "m10mo_fw.h"*/

#define ISP_FLASH_SECTORS			512			/* 512 sectors */
#define ISP_FLASH_SECTOR_SIZE		(4*1024)	/* 4KB */

#if 0
int main(int argc, char **argv)
{
	FILE *fp;
	int fd, rc;
	/* extra 1 byte is for report ID which must be set to '0' */
	uint8_t buf[HID_MSG_HDR_SIZE + HID_OTA_MSG_DATA_SIZE + 1];
	struct hid_msg *msg;
	struct hid_ota_msg *ota_msg;
	int offset = 0, i;

	if (argc != 2) {
		printf("usage: %s [path-to-fw]\n", argv[0] );
		return (-EINVAL);
	}

	fp = fopen(argv[1], "r");
	if (!fp) {
		printf("failed to open file %s: %s\n", argv[1], strerror(errno) );
		return (-errno);
	}

	fd = open_cx3(HID_DEV_OTA);
	if (fd < 0) {
		printf("failed to open OTA upgrade HID device\n");
		fclose(fp);
		return (fd);
	}

	msg = (struct hid_msg *) buf;
	msg->magic = HID_MSG_MAGIC;
	msg->cmd = HID_CMD_OTA_START;
	rc = write(fd, buf, sizeof(struct hid_msg));
	if (rc < 0) {
		printf("failed to send ota upgrade command to CX3: %d\n", errno);
		goto err_out;
	}

	msg = (struct hid_msg *) buf;
	msg->cmd = 0xffff;

	rc = read(fd, msg, sizeof(struct hid_msg) );
	if (rc != sizeof(struct hid_msg) ) {
		printf("failed to get response from CX3: %d\n", rc);
		goto err_out;
	}

	if (msg->magic != HID_MSG_MAGIC) {
		printf("response invalid\n");
		goto err_out;
	}

	if (msg->cmd != HID_CMD_OTA_CONTINUE) {
		printf("unexpected response: %d: %d\n", msg->cmd, msg->status);
		goto err_out;
	}

	while (offset < (ISP_FLASH_SECTORS * ISP_FLASH_SECTOR_SIZE) ) {
		buf[0] = 0;		/* report ID, must be '0' so that hidraw can delete it */
		ota_msg = (struct hid_ota_msg *) (buf + 1);
		ota_msg->magic = HID_MSG_MAGIC;
		ota_msg->cmd = HID_CMD_OTA_DATA;
		ota_msg->len = HID_OTA_MSG_DATA_SIZE;
		for (i = 0; i < ISP_FLASH_SECTOR_SIZE / HID_OTA_MSG_DATA_SIZE; i++) {
#if 0
			memcpy(ota_msg->data,
					m10mo_fw + offset + i * HID_OTA_MSG_DATA_SIZE,
					HID_OTA_MSG_DATA_SIZE);
#else
			rc = fread(ota_msg->data, 1, HID_OTA_MSG_DATA_SIZE, fp);
			if (rc != HID_OTA_MSG_DATA_SIZE) {
				printf("firmware content not aligned (%d/%d bytes read),"
						" corrupted file?", rc, HID_OTA_MSG_DATA_SIZE);
				goto err_out;
			}
#endif
			rc = write(fd, buf, sizeof(buf) );
			if (rc != sizeof(buf) ) {
				printf("failed to write firmware to CX3: %d\n", errno);
				goto err_out;
			}
		}

		printf("sending firmware [0x%08x - 0x%08x]...\n",
				offset, offset+ISP_FLASH_SECTOR_SIZE);

		offset += ISP_FLASH_SECTOR_SIZE;
	}

	msg = (struct hid_msg *) buf;
	msg->status = 0xffff;
	rc = read(fd, msg, sizeof(struct hid_msg) );
	if (rc != sizeof(struct hid_msg) ) {
		printf("failed to get response from CX3\n");
		goto err_out;
	}

	if (msg->magic != HID_MSG_MAGIC) {
		printf("response invalid\n");
		goto err_out;
	}

	if (msg->status != HID_ISP_OTA_SUCCESS) {
		printf("OTA upgrade failed: %04x\n", msg->status);
		goto err_out;
	}

	printf("OTA upgrade complete\n");
	close(fd);
	return (0);

err_out:
	printf("OTA upgrade failed\n");
	fclose(fp);
	close(fd);
	return 0;
}
#endif



